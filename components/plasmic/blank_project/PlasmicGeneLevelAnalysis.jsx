// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jkYJ3dfQP9Jr9rELTBAbk6
// Component: GY4buiWFlX
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "../../Select"; // plasmic-import: KMpDeVQrT8c/component
import { Slider } from "@plasmicpkgs/antd"; // plasmic-import: iBC45mjTXv/codeComponent
import { useScreenVariants as useScreenVariantsxIb2QrgNym } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: xIb2_QrgNYM/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: jkYJ3dfQP9Jr9rELTBAbk6/projectcss
import sty from "./PlasmicGeneLevelAnalysis.module.css"; // plasmic-import: GY4buiWFlX/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: V6XrmnnWIBE/icon

export const PlasmicGeneLevelAnalysis__VariantProps = new Array();

export const PlasmicGeneLevelAnalysis__ArgProps = new Array();

function PlasmicGeneLevelAnalysis__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsxIb2QrgNym()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            hasGap={true}
            className={classNames(projectcss.all, sty.navbar)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zqq2E)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={{
                  src: "/plasmic/blank_project/images/image.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rMeIh)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zWzSi
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__ow1Zf)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___27Zot
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFF7F7" }}
                      >
                        {"Home"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__uywfY)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pLyN6
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__tln09)}
                      role={"img"}
                    />
                  ) : null}

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kLp0
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__rr4Kz)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mRTqW
                      )}
                    >
                      {"Gene-level Analysis"}
                    </div>

                    {false ? (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__mWm2W)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wp3X4
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Immunogenicity"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__vwLsi)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sWk5J
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__wEdNq)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e2XQ3
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Reactogenicity"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__hinGq)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__znRaa
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__f5R1N)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___53E3T
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"About"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>

                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__mN4Ir)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__vgfAz)}>
                  <button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__gyy5
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__oJ2O)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q249M
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__si4Or)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <h1
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.title
                )}
              >
                {"Gene-level Analysis"}
              </h1>

              <div
                data-plasmic-name={"mainMenu"}
                data-plasmic-override={overrides.mainMenu}
                className={classNames(projectcss.all, sty.mainMenu)}
              >
                <div
                  data-plasmic-name={"cohort"}
                  data-plasmic-override={overrides.cohort}
                  className={classNames(projectcss.all, sty.cohort)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p4E2H
                    )}
                  >
                    {"Cohort"}
                  </div>

                  <Select
                    className={classNames("__wab_instance", sty.select__byrN)}
                  />
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"comp"}
                    data-plasmic-override={overrides.comp}
                    className={classNames(projectcss.all, sty.comp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xaJeu
                      )}
                    >
                      {"Select Day"}
                    </div>

                    <Select
                      className={classNames(
                        "__wab_instance",
                        sty.select__zq7Ou
                      )}
                    />
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              {true ? (
                <div
                  data-plasmic-name={"volcano2"}
                  data-plasmic-override={overrides.volcano2}
                  className={classNames(projectcss.all, sty.volcano2)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"volcanoInput"}
                      data-plasmic-override={overrides.volcanoInput}
                      className={classNames(projectcss.all, sty.volcanoInput)}
                    >
                      <div
                        data-plasmic-name={"fc"}
                        data-plasmic-override={overrides.fc}
                        className={classNames(projectcss.all, sty.fc)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7WcM
                          )}
                        >
                          {"FC Threshold"}
                        </div>

                        <Slider
                          className={classNames(
                            "__wab_instance",
                            sty.antdSlider__nwqlH
                          )}
                          defaultValue={0.322}
                          max={5}
                          min={0}
                          range={true}
                          step={undefined}
                        />
                      </div>

                      <div
                        data-plasmic-name={"fdr"}
                        data-plasmic-override={overrides.fdr}
                        className={classNames(projectcss.all, sty.fdr)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zPz2
                          )}
                        >
                          {"FDR"}
                        </div>

                        <Slider
                          className={classNames(
                            "__wab_instance",
                            sty.antdSlider__vb32Q
                          )}
                          defaultValue={0.01}
                          max={1}
                          min={0}
                          range={true}
                          step={0.01}
                        />
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      data-plasmic-name={"volcanoPlot"}
                      data-plasmic-override={overrides.volcanoPlot}
                      className={classNames(projectcss.all, sty.volcanoPlot)}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"volcanoFig"}
                        data-plasmic-override={overrides.volcanoFig}
                        alt={""}
                        className={classNames(sty.volcanoFig)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"490px"}
                        loading={"lazy"}
                        src={
                          "https://galaxyproject.github.io/training-material/topics/transcriptomics/images/rna-seq-viz-with-volcanoplot/volcanoplot.png"
                        }
                      />
                    </div>
                  ) : null}
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__h1DFi)}>
                  <div
                    data-plasmic-name={"selectedGene"}
                    data-plasmic-override={overrides.selectedGene}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.selectedGene
                    )}
                  >
                    {"Gene Name"}
                  </div>

                  {true ? (
                    <div
                      data-plasmic-name={"boxplot"}
                      data-plasmic-override={overrides.boxplot}
                      className={classNames(projectcss.all, sty.boxplot)}
                    >
                      {true ? (
                        <div
                          data-plasmic-name={"boxPlot"}
                          data-plasmic-override={overrides.boxPlot}
                          className={classNames(projectcss.all, sty.boxPlot)}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"boxFig"}
                            data-plasmic-override={overrides.boxFig}
                            alt={""}
                            className={classNames(sty.boxFig)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"510px"}
                            loading={"lazy"}
                            src={
                              "https://seaborn.pydata.org/_images/seaborn-boxplot-2.png"
                            }
                          />
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      data-plasmic-name={"network"}
                      data-plasmic-override={overrides.network}
                      className={classNames(projectcss.all, sty.network)}
                    >
                      <div
                        data-plasmic-name={"networkInput"}
                        data-plasmic-override={overrides.networkInput}
                        className={classNames(projectcss.all, sty.networkInput)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Qocw
                          )}
                        >
                          {"Correlation"}
                        </div>

                        <Slider
                          className={classNames(
                            "__wab_instance",
                            sty.antdSlider__qJGq
                          )}
                          defaultValue={0.75}
                          max={1}
                          range={true}
                          step={0.01}
                          vertical={false}
                        />
                      </div>

                      {true ? (
                        <div
                          data-plasmic-name={"netPlot"}
                          data-plasmic-override={overrides.netPlot}
                          className={classNames(projectcss.all, sty.netPlot)}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"networkPlot"}
                            data-plasmic-override={overrides.networkPlot}
                            alt={""}
                            className={classNames(sty.networkPlot)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"504px"}
                            loading={"lazy"}
                            src={
                              "https://sckidney.flatironinstitute.org/static/img/network_names.jpg"
                            }
                          />
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames(projectcss.all, sty.footer)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fGb8K
                )}
              >
                {"CSBL"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "img",
    "button",
    "header",
    "title",
    "mainMenu",
    "cohort",
    "comp",
    "main",
    "volcano2",
    "volcanoInput",
    "fc",
    "fdr",
    "volcanoPlot",
    "volcanoFig",
    "selectedGene",
    "boxplot",
    "boxPlot",
    "boxFig",
    "network",
    "networkInput",
    "netPlot",
    "networkPlot",
    "footer"
  ],

  navbar: ["navbar", "img", "button"],
  img: ["img"],
  button: ["button"],
  header: ["header", "title", "mainMenu", "cohort", "comp"],
  title: ["title"],
  mainMenu: ["mainMenu", "cohort", "comp"],
  cohort: ["cohort"],
  comp: ["comp"],
  main: [
    "main",
    "volcano2",
    "volcanoInput",
    "fc",
    "fdr",
    "volcanoPlot",
    "volcanoFig",
    "selectedGene",
    "boxplot",
    "boxPlot",
    "boxFig",
    "network",
    "networkInput",
    "netPlot",
    "networkPlot"
  ],

  volcano2: [
    "volcano2",
    "volcanoInput",
    "fc",
    "fdr",
    "volcanoPlot",
    "volcanoFig"
  ],

  volcanoInput: ["volcanoInput", "fc", "fdr"],
  fc: ["fc"],
  fdr: ["fdr"],
  volcanoPlot: ["volcanoPlot", "volcanoFig"],
  volcanoFig: ["volcanoFig"],
  selectedGene: ["selectedGene"],
  boxplot: ["boxplot", "boxPlot", "boxFig"],
  boxPlot: ["boxPlot", "boxFig"],
  boxFig: ["boxFig"],
  network: ["network", "networkInput", "netPlot", "networkPlot"],
  networkInput: ["networkInput"],
  netPlot: ["netPlot", "networkPlot"],
  networkPlot: ["networkPlot"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGeneLevelAnalysis__ArgProps,
      internalVariantPropNames: PlasmicGeneLevelAnalysis__VariantProps
    });

    return PlasmicGeneLevelAnalysis__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGeneLevelAnalysis";
  } else {
    func.displayName = `PlasmicGeneLevelAnalysis.${nodeName}`;
  }
  return func;
}

export const PlasmicGeneLevelAnalysis = Object.assign(
  // Top-level PlasmicGeneLevelAnalysis renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    header: makeNodeComponent("header"),
    title: makeNodeComponent("title"),
    mainMenu: makeNodeComponent("mainMenu"),
    cohort: makeNodeComponent("cohort"),
    comp: makeNodeComponent("comp"),
    main: makeNodeComponent("main"),
    volcano2: makeNodeComponent("volcano2"),
    volcanoInput: makeNodeComponent("volcanoInput"),
    fc: makeNodeComponent("fc"),
    fdr: makeNodeComponent("fdr"),
    volcanoPlot: makeNodeComponent("volcanoPlot"),
    volcanoFig: makeNodeComponent("volcanoFig"),
    selectedGene: makeNodeComponent("selectedGene"),
    boxplot: makeNodeComponent("boxplot"),
    boxPlot: makeNodeComponent("boxPlot"),
    boxFig: makeNodeComponent("boxFig"),
    network: makeNodeComponent("network"),
    networkInput: makeNodeComponent("networkInput"),
    netPlot: makeNodeComponent("netPlot"),
    networkPlot: makeNodeComponent("networkPlot"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicGeneLevelAnalysis
    internalVariantProps: PlasmicGeneLevelAnalysis__VariantProps,
    internalArgProps: PlasmicGeneLevelAnalysis__ArgProps
  }
);

export default PlasmicGeneLevelAnalysis;
/* prettier-ignore-end */
